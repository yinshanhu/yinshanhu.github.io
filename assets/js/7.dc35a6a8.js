(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{317:function(t,a,s){t.exports=s.p+"assets/img/algo-complexity-01.d6ee1d18.jpg"},356:function(t,a,s){"use strict";s.r(a);var n=[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"算法复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法复杂度")]),t._v(" "),n("blockquote",[n("p",[t._v("2019.03.07")])]),t._v(" "),n("blockquote",[n("p",[t._v("一段程序的好坏从两个指标上衡量，时间复杂复和空间复杂度。时间复杂度是指执行这个算法所需要的计算工作量；空间复杂度是指执行这个算法所需要的内存空间。这两个指标个人认为是在我们敲下代码之前必须要思考的两个出发点，想到了就能写得一手好代码！想不到，只能对产品经理呵呵呵。")])]),t._v(" "),n("h2",{attrs:{id:"时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("理论上讲，一个算法的执行时间我们是没办法通过公式或什么算出来的，但是我们也不可能去机器上去实测一下，对我们程序员来讲其实只要需要知道哪个算法执行花的时间多，哪个算法执行花的时间少就可以了，而且算法的执行时间和算法的执行次数肯定是正比的，所以哪个算法执行次数多，那么花费的时间肯定多。一个算法中的语句执行次数称为语句频度或时间频度。记为 "),n("code",[t._v("T(n)")]),t._v(" ; "),n("code",[t._v("n")]),t._v(" 称为问题的规模，当 "),n("code",[t._v("n")]),t._v(" 不断变化时，时间频度 "),n("code",[t._v("T(n)")]),t._v(" 也会不断变化。使用 "),n("code",[t._v("O")]),t._v(" 记号法（大 "),n("code",[t._v("O")]),t._v(" 记号）表示最坏运行情况的上界。")])]),t._v(" "),n("li",[n("p",[t._v("大O记号推导方法：")])])]),t._v(" "),n("p",[t._v("① 用常数1取代运行时间中的所有加法常数。")]),t._v(" "),n("p",[t._v("② 在修改后的运行次数函数中，只保留最高阶项。")]),t._v(" "),n("p",[t._v("③ 如果最高阶项存在且不是1，则去除与这个项目相乘的常数。得到的结果就是大O阶。")]),t._v(" "),n("h3",{attrs:{id:"常数阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常数阶","aria-hidden":"true"}},[t._v("#")]),t._v(" 常数阶")]),t._v(" "),n("p",[t._v("下面这个算法总共执行了三次，"),n("code",[t._v("T(n) = 3")]),t._v(" 用 "),n("code",[t._v("1")]),t._v(" 代替常数 "),n("code",[t._v("3")]),t._v(" 时间复杂度为 "),n("code",[t._v("0(1)")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行一次")]),t._v("\nsum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行一次")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行一次")]),t._v("\n")])])]),n("h3",{attrs:{id:"线性阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线性阶","aria-hidden":"true"}},[t._v("#")]),t._v(" 线性阶")]),t._v(" "),n("p",[t._v("循环体执行"),n("code",[t._v("n")]),t._v("次，时间复杂度为 "),n("code",[t._v("O(n)")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行n次")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"对数阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对数阶","aria-hidden":"true"}},[t._v("#")]),t._v(" 对数阶")]),t._v(" "),n("p",[t._v("由2^x=n 得到x=log2^n 即 logn （log以2为底的对数函数为"),n("code",[t._v("常用对数")]),t._v("，省略底数2，即logn）,时间复杂度为 "),n("code",[t._v("O(logn)")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行 log2^n 次   ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"平方阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#平方阶","aria-hidden":"true"}},[t._v("#")]),t._v(" 平方阶")]),t._v(" "),n("p",[t._v("循环体执行 "),n("code",[t._v("n X n")]),t._v(" 次，时间复杂度为 "),n("code",[t._v("O(n^2)")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行 n X n 次  ")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"立方阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#立方阶","aria-hidden":"true"}},[t._v("#")]),t._v(" 立方阶")]),t._v(" "),n("p",[t._v("循环体执行 "),n("code",[t._v("n X n X n")]),t._v(" 次，时间复杂度为 "),n("code",[t._v("O(n^3)")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行 n X n X n 次  ")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"常见时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见时间复杂度")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("算法执行次数的函数")]),t._v(" "),n("th",[t._v("大O阶")]),t._v(" "),n("th",[t._v("非正式术语")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("12")]),t._v(" "),n("td",[t._v("O(1)")]),t._v(" "),n("td",[t._v("常数阶")])]),t._v(" "),n("tr",[n("td",[t._v("2n+3")]),t._v(" "),n("td",[t._v("O(n)")]),t._v(" "),n("td",[t._v("线性阶")])]),t._v(" "),n("tr",[n("td",[t._v("3n2+2n+1")]),t._v(" "),n("td",[t._v("O(n2)")]),t._v(" "),n("td",[t._v("平方阶")])]),t._v(" "),n("tr",[n("td",[t._v("5log2n+20")]),t._v(" "),n("td",[t._v("O(logn)")]),t._v(" "),n("td",[t._v("对数阶")])]),t._v(" "),n("tr",[n("td",[t._v("2n+3nlog2n+19")]),t._v(" "),n("td",[t._v("O(nlogn)")]),t._v(" "),n("td",[t._v("nlog2n阶")])]),t._v(" "),n("tr",[n("td",[t._v("6n3+2n2+3n+4")]),t._v(" "),n("td",[t._v("O(n3)")]),t._v(" "),n("td",[t._v("立方阶")])]),t._v(" "),n("tr",[n("td",[t._v("2n")]),t._v(" "),n("td",[t._v("o(2n)")]),t._v(" "),n("td",[t._v("指数阶")])])])]),t._v(" "),n("h3",{attrs:{id:"时间复杂度从小到大为（越小越好）："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度从小到大为（越小越好）：","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间复杂度从小到大为（越小越好）：")]),t._v(" "),n("p",[t._v("O(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)")]),t._v(" "),n("h3",{attrs:{id:"直观看图（图片谷哥给的）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#直观看图（图片谷哥给的）","aria-hidden":"true"}},[t._v("#")]),t._v(" 直观看图（图片谷哥给的）")]),t._v(" "),n("p",[n("img",{attrs:{src:s(317),alt:"xiangxian"}})]),t._v(" "),n("h2",{attrs:{id:"空间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),n("p",[n("em",[t._v("百度百科读一遍：")])]),t._v(" "),n("ul",[n("li",[t._v("空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。")])]),t._v(" "),n("p",[t._v("同样也是用大O来表示。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如对于递归算法来说，一般都比较简短，算法本身所占用的存储空间较少，但运行时需要一个附加堆栈，从而占用较多的临时工作单元；若写成非递归算法，一般可能比较长，算法本身占用的存储空间较多，但运行时将可能需要较少的存储单元。")])]),t._v(" "),n("li",[n("p",[t._v("计算方法：")])])]),t._v(" "),n("p",[t._v("①算法的空间不随被处理数据量n的大小而改变时，可表示为O(1)。（"),n("em",[t._v("冒泡排序")]),t._v("）")]),t._v(" "),n("p",[t._v("②算法的空间以2为底的n的对数成正比时，可表示为O(log2n)。（"),n("em",[t._v("快速排序")]),t._v("）")]),t._v(" "),n("p",[t._v("③算法的空间复杂度与n成线性比例关系时，可表示为O(n)。（"),n("em",[t._v("一般的递归算法")]),t._v("）")]),t._v(" "),n("p",[t._v("④递归算法的空间复杂度=递归深度N*每次递归所要的辅助空间。")]),t._v(" "),n("p",[t._v("⑤对于单线程来说，递归有运行时堆栈，求的是递归最深的那一次压栈所耗费的空间的个数，因为递归最深的那一次所耗费的空间足以容纳它所有递归过程。")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("做为一名资深程序员，知道自己敲的代码是好是坏吗？时间复杂度和空间复杂度是算法的尺子和磅秤，只有身高和体重协调了才是最合适的。工作中写过的算法，有考虑过它的时间消耗？写出来个递规了就感觉牛逼了，有想过这种算法的空间开销？")])])}],r=s(1),e=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);a.default=e.exports}}]);